/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum PlayerStatus {
  /** Playback is currently not active. */
  Stopped = 'Stopped',
  /** Playback is in progress. */
  Playing = 'Playing',
  /** Playback is temporarily halted but can be resumed. */
  Paused = 'Paused',
  /** The playback position is being adjusted, either forward or backward. */
  Seeking = 'Seeking',
  /** Playback is momentarily halted due to data loading or network conditions. */
  Buffering = 'Buffering',
  /** An issue occurred, and playback cannot proceed. */
  Error = 'Error',
  /** The playback state could not be determined or is undefined. */
  Unknown = 'Unknown'
}
export interface TimelineInfo {
  /** Position in seconds from track start */
  position: number
  /** Track duration in seconds */
  duration: number
  /** Playback speed rate. Use 1.0 */
  rate: number
}
export const enum CurrentTextMetadata {
  Title = 'Title',
  Author = 'Author',
  Album = 'Album',
  Genre = 'Genre'
}
export const enum LogLevel {
  Trace = 0,
  Debug = 1,
  Info = 2,
  Warn = 3,
  Error = 4
}
export declare function initLogger(level: LogLevel): void
export declare class NodePlayer {
  constructor()
  setStatus(status: PlayerStatus): void
  setTimeline(timeline?: TimelineInfo | undefined | null): void
  setText(textType: CurrentTextMetadata, text?: string | undefined | null): void
}
export declare class FsctService {
  constructor()
  runFsct(player: NodePlayer): Promise<void>
  stopFsct(): void
  
}
